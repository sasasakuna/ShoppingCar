apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'java'
/*apply plugin: 'checkstyle'*/

group = 'com.thoughtworks.ns.collection'
version = '0.0.1'

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:15.0',
			'org.mybatis:mybatis:3.2.5',
           'org.mybatis:mybatis-spring:1.1.1',
           'javax.servlet:servlet-api:2.5',
           'org.springframework:spring-core:3.1.1.RELEASE',
           'org.springframework:spring-webmvc:3.1.1.RELEASE',
           'org.springframework:spring-web:3.1.1.RELEASE',
           'commons-dbcp:commons-dbcp:1.4',
           'org.springframework:spring-orm:3.1.0.RELEASE',
           'com.h2database:h2:1.3.167',
           'cglib:cglib:2.2.2',
           'org.freemarker:freemarker:2.3+',
           'ch.qos.logback:logback-classic:1.0.0',
           'commons-lang:commons-lang:2.6',
           'org.jasig.cas:cas-client-core:3.1.10',
           'hsqldb:hsqldb:1.8.0.10',
           'mysql:mysql-connector-java:5.1.18',
           'org.springframework.security:spring-security-core:3.1.0.RELEASE',
           'org.springframework.security:spring-security-cas:3.1.0.RELEASE',
           'org.springframework.security:spring-security-config:3.1.0.RELEASE',
           'org.springframework.security:spring-security-web:3.1.0.RELEASE'

    testCompile (
        'junit:junit:4.11',
        'org.hamcrest:hamcrest-all:1.3',
		'org.springframework:spring-test:3.1.1.RELEASE',
                'org.mockito:mockito-all:1.9.0',
                'org.seleniumhq.selenium:selenium-java:2.24.1'
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

task initProject << {
    sourceSets.all { sourceSet ->
        sourceSet.allJava.srcDirs.each {
            it.exists() || it.mkdirs()
        }
    }
}

jettyRun {
    contextPath = ''
}

/*checkstyleMain {
    configFile = file('config/checkstyle/checkstyleMain.xml')
}*/

/*checkstyleTest {
    configFile = file('config/checkstyle/checkstyleTest.xml')
}*/

 task createJavaProject << { 
  sourceSets*.java.srcDirs*.each { it.mkdirs() } 
  sourceSets*.resources.srcDirs*.each { it.mkdirs()} 
} 
 
task createWebProject(dependsOn: 'createJavaProject') << { 
  def webAppDir = file("$webAppDirName") 
  webAppDir.mkdirs() 
} 